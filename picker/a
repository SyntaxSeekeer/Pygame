import pygame
import random
import time

# Initialize Pygame
pygame.init()

# Game window dimensions
WIDTH, HEIGHT = 800, 600
WHITE = (255, 255, 255)

# Set up the screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Item Collection Game")
FPS = 60
clock = pygame.time.Clock()

# Fonts
font = pygame.font.SysFont("Arial", 30)

# Define the Player class
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("sprites/enemy.png")  # Replace with your image file
        self.image = pygame.transform.scale(self.image, (50, 50))  # Scale the image
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH // 2, HEIGHT // 2)
        self.speed = 5

    def update(self):
        keys = pygame.key.get_pressed()

        # Diagonal movement handling
        move_x, move_y = 0, 0

        if keys[pygame.K_LEFT]:
            move_x = -self.speed
        if keys[pygame.K_RIGHT]:
            move_x = self.speed
        if keys[pygame.K_UP]:
            move_y = -self.speed
        if keys[pygame.K_DOWN]:
            move_y = self.speed

        # Normalize diagonal movement to keep the speed constant
        if move_x != 0 and move_y != 0:
            move_x = move_x / 1.414  # Divide by sqrt(2) to normalize diagonal movement
            move_y = move_y / 1.414  # Divide by sqrt(2) to normalize diagonal movement

        # Update the player position
        self.rect.x += move_x
        self.rect.y += move_y

        # Prevent the player from going off-screen
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.top < 0:
            self.rect.top = 0
        if self.rect.bottom > HEIGHT:
            self.rect.bottom = HEIGHT


# Define the Item class
class Item(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("sprites/Ak47.png")  # Replace with your image file
        self.image = pygame.transform.scale(self.image, (50, 50))  # Scale the image
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, WIDTH - 30)
        self.rect.y = random.randint(0, HEIGHT - 30)


# Create the player and sprite groups
player = Player()
all_sprites = pygame.sprite.Group()
all_sprites.add(player)
items = pygame.sprite.Group()

# Timer-based spawn of items
last_spawn_time = pygame.time.get_ticks()
spawn_interval = 2000  # Time in milliseconds (2 seconds)

# Game variables
score = 0
game_over = False
timer = 30  # Game timer in seconds
start_time = time.time()

# Function to spawn a new item
def spawn_item():
    item = Item()  # Create a new Item object
    items.add(item)  # Add it to the 'items' group
    all_sprites.add(item)  # Add it to the 'all_sprites' group


# Main game loop
running = True
while running:
    screen.fill(WHITE)
    current_time = time.time()
    elapsed_time = current_time - start_time
    remaining_time = max(0, timer - int(elapsed_time))

    # Display the score and remaining time
    score_text = font.render(f"Score: {score}", True, (0, 0, 0))
    time_text = font.render(f"Time: {remaining_time}s", True, (0, 0, 0))
    screen.blit(score_text, (10, 10))
    screen.blit(time_text, (WIDTH - 150, 10))

    # Check for collisions between player and items
    collisions = pygame.sprite.spritecollide(player, items, True)
    for item in collisions:
        score += 10  # Increase score when an item is picked up
        print(f"Item collected, score: {score}")

    # Timer-based item spawning
    current_ticks = pygame.time.get_ticks()
    if current_ticks - last_spawn_time > spawn_interval:
        spawn_item()
        last_spawn_time = current_ticks  # Update last spawn time

    # Check if the game time is over
    if remaining_time == 0:
        game_over = True
        running = False

    # Update the player and items
    all_sprites.update()

    # Draw everything
    all_sprites.draw(screen)

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Update the display
    pygame.display.flip()

    # Control the frame rate
    clock.tick(FPS)

# Game Over Screen
if game_over:
    game_over_text = font.render("GAME OVER", True, (255, 0, 0))
    score_text = font.render(f"Final Score: {score}", True, (0, 0, 0))
    screen.fill(WHITE)
    screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, HEIGHT // 3))
    screen.blit(score_text, (WIDTH // 2 - score_text.get_width() // 2, HEIGHT // 2))

    pygame.display.flip()

# Quit the game
pygame.quit()
