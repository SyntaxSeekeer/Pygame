
import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Game settings
PLAYER_WIDTH = 50
PLAYER_HEIGHT = 50
ENEMY_WIDTH = 50
ENEMY_HEIGHT = 50
FPS = 60
GAME_TIME = 30  # Game time in seconds

# Initialize screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Falling Enemies Game")

# Clock for controlling frame rate
clock = pygame.time.Clock()

# Fonts
font = pygame.font.Font(None, 48)

# Load images
player_image = pygame.image.load("sprites/enemy.png")
enemy_image = pygame.image.load("sprites/Ak47.png")

# Scale images to fit dimensions
player_image = pygame.transform.scale(player_image, (PLAYER_WIDTH, PLAYER_HEIGHT))
enemy_image = pygame.transform.scale(enemy_image, (ENEMY_WIDTH, ENEMY_HEIGHT))

# Player class
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = player_image
        self.rect = self.image.get_rect()
        self.rect.x = SCREEN_WIDTH // 2
        self.rect.y = SCREEN_HEIGHT - 70

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and self.rect.x > 0:
            self.rect.x -= 5
        if keys[pygame.K_RIGHT] and self.rect.x < SCREEN_WIDTH - PLAYER_WIDTH:
            self.rect.x += 5

# Enemy class
class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = enemy_image
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - ENEMY_WIDTH)
        self.rect.y = -ENEMY_HEIGHT

    def update(self):
        self.rect.y += 5
        if self.rect.y > SCREEN_HEIGHT:
            self.kill()

# Function to reset the game
def reset_game():
    global all_sprites, enemies, player, game_over, win, start_time
    all_sprites = pygame.sprite.Group()
    enemies = pygame.sprite.Group()

    player = Player()
    all_sprites.add(player)

    game_over = False
    win = False
    start_time = pygame.time.get_ticks()

# Initialize game
reset_game()

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            reset_game()

    # Game logic
    if not game_over:
        # Spawn enemies
        if random.randint(1, 30) == 1:  # Adjust spawn rate
            enemy = Enemy()
            all_sprites.add(enemy)
            enemies.add(enemy)

        # Update sprites
        all_sprites.update()

        # Check for collisions
        if pygame.sprite.spritecollideany(player, enemies):
            game_over = True

        # Check timer
        elapsed_time = (pygame.time.get_ticks() - start_time) / 1000
        if elapsed_time >= GAME_TIME:
            game_over = True
            win = True

    # Drawing
    if not game_over:
        screen.fill(WHITE)
        all_sprites.draw(screen)

        # Display timer
        timer_text = font.render(f"Time Left: {max(0, GAME_TIME - int(elapsed_time))}", True, BLACK)
        screen.blit(timer_text, (10, 10))
    else:
        # Display win/game over screen
        screen.fill(BLACK)
        if win:
            end_text = font.render("You Win! Press SPACE to Restart", True, WHITE)
        else:
            end_text = font.render("Game Over! Press SPACE to Restart", True, WHITE)
        screen.blit(end_text, (SCREEN_WIDTH // 2 - end_text.get_width() // 2, SCREEN_HEIGHT // 2 - end_text.get_height() // 2))

    # Update the display
    pygame.display.flip()

    # Cap the frame rate
    clock.tick(FPS)

# Quit Pygame
pygame.quit()
sys.exit()
